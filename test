import numpy as np
import matplotlib.pyplot as plt

# Function to calculate beamforming response
def compute_beam_pattern(num_elements, spacing, steering_angle, frequencies, scan_angles):
    """
    Computes the beam pattern for a linear array.

    Parameters:
    - num_elements: Number of array elements
    - spacing: Distance between elements (in wavelengths)
    - steering_angle: Beam steering angle (in degrees)
    - frequencies: List of frequencies (normalized to wavelength)
    - scan_angles: Array of angles to scan

    Returns:
    - beam_pattern: Array of beam pattern values for each scan angle
    """
    # Convert angles to radians
    steering_angle_rad = np.radians(steering_angle)
    scan_angles_rad = np.radians(scan_angles)

    # Compute wave numbers for each frequency
    wave_numbers = 2 * np.pi * np.array(frequencies)

    # Calculate steering phase shifts
    phase_shifts = wave_numbers[:, None] * spacing * np.sin(steering_angle_rad)

    # Initialize beam pattern
    beam_pattern = np.zeros_like(scan_angles, dtype=np.float64)

    # Loop through scan angles and compute array response
    for angle in scan_angles_rad:
        phase_differences = wave_numbers[:, None] * spacing * np.sin(angle)
        responses = np.sum(np.exp(1j * (phase_differences - phase_shifts)), axis=1)
        beam_pattern += np.abs(responses) ** 2

    return 10 * np.log10(beam_pattern / np.max(beam_pattern))  # Normalize in dB

# Parameters
num_elements = 8          # Number of elements in the array
spacing = 0.5             # Spacing between elements (in wavelengths)
steering_angle = 30       # Beam steering angle (degrees)
frequencies = [1.0]       # Single normalized frequency
scan_angles = np.linspace(-90, 90, 1000)  # Angles to scan (degrees)

# Compute the beam pattern
beam_pattern = compute_beam_pattern(num_elements, spacing, steering_angle, frequencies, scan_angles)

# Plot the beam pattern
plt.figure(figsize=(8, 6))
plt.plot(scan_angles, beam_pattern, label="Beam Pattern")
plt.axvline(steering_angle, color='r', linestyle='--', label="Steering Angle")
plt.xlabel("Scan Angle (degrees)")
plt.ylabel("Beam Pattern (dB)")
plt.title("Linear Array Beamforming Pattern")
plt.grid(True)
plt.legend()
plt.show()
